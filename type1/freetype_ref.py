import freetype
import subprocess


def bounds_glyph(filename):
    face = freetype.Face(filename)
    bboxes, advances = "{\n", "{\n"
    for i in range(face.num_glyphs):
        face.load_glyph(i, flags=freetype.FT_LOAD_NO_SCALE)
        bbox = face.glyph.outline.get_cbox()
        bboxes += f"{{ Min: ps.Point{{ X:{bbox.xMin}, Y:{bbox.yMin} }}, Max: ps.Point{{ X:{bbox.xMax}, Y:{bbox.yMax} }} }}" + f",// GID: {i}\n"

        adv = face.get_advance(i, freetype.FT_LOAD_NO_SCALE)
        advances += f"{adv},// GID: {i}\n"
    bboxes += "}"
    advances += "}"

    return bboxes, advances


filenames = [
    "test/c0419bt_.pfb",
    "test/CalligrapherRegular.pfb",
    "test/Z003-MediumItalic.t1",
]

filenamesGoString = "\n".join([f'"{fi}",' for fi in filenames])

expectedBounds = "\n".join(
    [f"// { fi } \n" + bounds_glyph(fi)[0] + "," for fi in filenames])
expectedAdvances = "\n".join(
    [f"// { fi } \n" + bounds_glyph(fi)[1] + "," for fi in filenames])

code = f"""package type1

// Code generated by test/freetype_ref.py DO NOT EDIT.

import ps "github.com/benoitkugler/textlayout/fonts/psinterpreter"

var filenamesBounds = [...]string{{
   { filenamesGoString }
}}

var expectedBounds = [...][]ps.PathBounds{{
    { expectedBounds }
}}

var expectedAdvances = [...][]int32{{
    { expectedAdvances }
}}
"""

with open("bounds_ref_test.go", "w") as dst:
    dst.write(code)

subprocess.run(["goimports", "-w", "bounds_ref_test.go"])
